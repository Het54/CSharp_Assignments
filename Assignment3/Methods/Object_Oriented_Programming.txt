1) What are the six combinations of access modifier keywords and what do they do?
-> Six combinations of access modifier keywords are:
   - public: The public access modifier allows a class or class member to be accessible from any other code in the same assembly or another assembly that references it.
            Example: public int MyProperty { get; set; }
            
   - protected: The protected access modifier allows access to the containing class and any class that derives from it. Derived classes can access protected members.
            Example: protected void MyMethod() { }
            
   - private: The private access modifier restricts the access to the containing class only. Class members declared as private are not accessible outside the class.
            Example: private int myField;
            
   - internal: The internal access modifier allows access to any code in the same assembly, but not from another assembly. It's the default access level for class members if no access modifier is specified.
            Example: internal class MyClass { }
   
   - protected internal: The protected internal access modifier allows access to the containing class, derived classes, and any code in the same assembly. It's a combination of protected and internal.
            Example: protected internal int myProtectedInternalField;
            
   - private protected: The private protected access modifier restricts access to the containing class or types derived from the containing class, but only within the same assembly. It's a combination of private and protected.
            Example: private protected void MyPrivateProtectedMethod() { }
            
            
2) What is the difference between the static, const, and readonly keywords when applied to a type member?
-> Static: The static keyword denotes that the member belongs to the type itself rather than to a specific instance of the type.
            - It can be applied to fields, methods, properties, events, and constructors.
            - Static methods and properties can be accessed without creating an instance of the class.
   Const: The const keyword indicates that the value of the field is constant and cannot be changed after it is assigned.
            - It can only be applied to fields and local variables.
            - const fields must be initialized at the time of declaration.
            - They are implicitly static because their value is the same for all instances of the class.
   readonly: The readonly keyword indicates that the field can only be assigned a value during declaration or in the constructor of the class.
            - It can only be applied to fields.
            - Unlike const, the value of a readonly field is not a compile-time constant, allowing it to be determined at runtime.

3) What does a constructor do?
-> A constructor is a special method of a class or struct that initializes objects of that type. Its primary role is to set up the initial state of a new object (this includes assigning values to fields and properties).
    Key Features: 
    - Same Name as the Class
    - No Return Type
    - Called Automatically when the object of that class is instantiated
    - Overloading
    
    Functions: 
    - Initialization 
    - Resource Allocation
    - Setting Defaults

4) Why is the partial keyword useful?
-> The partial keyword is useful for several reasons, as it allows a class, struct, or interface to be split across multiple files.
    Key Benifits: 
    - Code Organization: 
        - Breaking a large class into multiple files can make the code more manageable and easier to navigate. This is particularly useful in large projects.
        - Different aspects of the class functionality can be separated into different files.
    - Team Development: 
        - Multiple developers can work on different parts of the same class simultaneously without causing merge conflicts, as each part can be in a different file.
    - Incremental Development:
        - Developers can incrementally add new features to a class without having to modify the original file. This is useful in scenarios where features are developed iteratively.
       
    To declare a class, struct, or interface as partial, you simply use the partial keyword in each part of the class. Each part must use the same name and be in the same namespace.
    Example: public partial class Person {
    }
    
5) What is a tuple?
-> A tuple is a data structure that provides an easy way to store a fixed-size collection of heterogeneous values. 
    - Tuples can group multiple values into a single object without having to explicitly define a class or struct. 
    - Once a tuple is created, its elements are read-only.
    - Tuples can contain both value types and reference types.
    
    Example: var person = (FirstName: "John", LastName: "Doe", Age: 30);

6) What does the C# record keyword do?
-> The record keyword is used to define a special type of class called a record, which is designed primarily for storing immutable data.
    Features: 
    - Immutable Data: Records are designed to be immutable by default, meaning their properties are read-only and can only be set during object initialization.
    - Value-Based Equality: Records provide value-based equality semantics, meaning two record instances are considered equal if all their properties are equal. This is different from the reference-based equality used in classes.
    - Concise Syntax: Records support a concise syntax for defining properties and constructors.
    - Built-in Methods: Records automatically provide implementations of methods like ToString(), Equals(), and GetHashCode().
    
    Example: public record Person(string FirstName, string LastName);
    NOTE: Records can also include additional members like methods, properties, and fields
    
    
7) What does overloading and overriding mean?
-> Overloading: 
    - Method Overloading allows multiple methods in the same scope to have the same name but different signatures. The signature includes the method name and the number, type, and order of parameters. 
    - Overloading provides a way to define different behaviors for a method based on the arguments passed.
   
   Overriding: 
    - Method Overriding allows a derived class to provide a specific implementation of a method that is already defined in its base class. 
    - The method in the base class must be marked with the virtual or abstract keyword, and the method in the derived class must use the override keyword.

8) What is the difference between a field and a property?
-> Fields and properties are both used to store data within a class or struct.

    Fields: Fields are variables declared directly in a class or struct. They are used to store data or state of an object.
    - Fields can be accessed directly by their name within the class or struct.
    - Fields provide less encapsulation and control over the data since they can be accessed and modified directly (unless marked as private).
    - Example: public string name;
    
    Properties:  Properties are members that provide a flexible mechanism to read, write, or compute the values of private fields. They use accessors (get and set) to control the access.
    - Properties provide better encapsulation and control over the data. The get accessor is used to return the property value, and the set accessor is used to assign a new value.
    - Properties can include logic in the get and set accessors, allowing for computed values, validation, or other operations.
    - Example: public string Name
                   {
                       get { return name; }
                       set
                       {
                           if (!string.IsNullOrEmpty(value))
                           {
                               name = value;
                           }
                       }
                   }
                   
9) How do you make a method parameter optional?   
-> We can make a method parameter optional by providing a default value for the parameter in the method's signature.
    Example: public int Add(int a=0 , int b = 0) // a and b value are set to 0 as a default value.
    
10) What is an interface and how is it different from abstract class?
-> Interface: An interface declares a set of members that implementing classes must provide.
              - A class can implement multiple interfaces, allowing it to inherit behavior from multiple sources.
              - All members of an interface are default public and abstract and cannot have any access modifiers (private, protected, etc.).
   
   Abstract Class: An abstract class can provides a partial implementation and serves as a blueprint for derived classes.
              - A class can inherit from only one abstract class (C# does not support multiple inheritance with classes).
              - Abstract classes can have different access modifiers (public, protected, etc.) for their members.
              
11) What accessibility level are members of an interface?
-> All members of an interface are implicitly public. 

12) Polymorphism allows derived classes to provide different implementations of the same method.
-> True

13) The override keyword is used to indicate that a method in
 a derived class is providing its own implementation of a method.
-> True

14) The new keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
-> False

15) Abstract methods can be used in a normal (non-abstract) class.
-> False

16) Normal (non-abstract) methods can be used in an abstract class.
-> True

17) Derived classes can override methods that were virtual in the base class.
-> True

18) Derived classes can override methods that were abstract in the base class.
-> True

19) In a derived class, you can override a method that was neither virtual non abstract in the base class.
-> False 

20) A class that implements an interface does not have to provide an implementation for all of the members of the interface.
-> False
     
21) A class that implements an interface is allowed to have other members that aren’t defined in the interface.
-> True

22) A class can have more than one base class.
-> False 

23) A class can implement more than one interface.
-> True
    
